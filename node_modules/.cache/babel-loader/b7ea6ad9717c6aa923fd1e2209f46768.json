{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderjarabik/Desktop/covid19/src/util.js\";\nimport React from 'react';\nimport numeral from 'numeral';\nimport { Circle, Popup } from \"react-leaflet\";\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000\n  }\n};\nexport const sortData = data => {\n  const sortedData = [...data];\n  return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1);\n}; // Draw circles on the map with iteractive tooltop\n\nexport const showDataOnMap = (data, casesType = 'cases') => data.map(country => /*#__PURE__*/React.createElement(Circle, {\n  center: [country.countryInfo.lat, country.countryInfo.long],\n  fillOpacity: 0.4,\n  fillColor: casesTypeColors[casesType].hex,\n  fillOpacity: 0.4,\n  radius: Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(Popup, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 13\n  }\n}, /*#__PURE__*/React.createElement(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 20\n  }\n}, \"Im a popap\"))));","map":{"version":3,"sources":["/Users/alexanderjarabik/Desktop/covid19/src/util.js"],"names":["React","numeral","Circle","Popup","casesTypeColors","cases","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","showDataOnMap","casesType","map","country","countryInfo","lat","long","Math","sqrt"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,eAA9B;AAEA,MAAMC,eAAe,GAAG;AACpBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,GAAG,EAAE,SADF;AAEHC,IAAAA,GAAG,EAAE,kBAFF;AAGHC,IAAAA,OAAO,EAAE,wBAHN;AAIHC,IAAAA,UAAU,EAAE;AAJT,GADa;AAOpBC,EAAAA,SAAS,EAAE;AACPJ,IAAAA,GAAG,EAAE,SADE;AAEPC,IAAAA,GAAG,EAAE,mBAFE;AAGPC,IAAAA,OAAO,EAAE,yBAHF;AAIPC,IAAAA,UAAU,EAAE;AAJL,GAPS;AAapBE,EAAAA,MAAM,EAAE;AACJL,IAAAA,GAAG,EAAE,SADD;AAEJC,IAAAA,GAAG,EAAE,kBAFD;AAGJC,IAAAA,OAAO,EAAE,wBAHL;AAIJC,IAAAA,UAAU,EAAE;AAJR;AAbY,CAAxB;AAuBA,OAAO,MAAMG,QAAQ,GAAIC,IAAD,IAAU;AAC9B,QAAMC,UAAU,GAAG,CAAC,GAAGD,IAAJ,CAAnB;AAEA,SAAOC,UAAU,CAACC,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACX,KAAF,GAAUY,CAAC,CAACZ,KAAZ,GAAoB,CAAC,CAArB,GAAyB,CAApD,CAAP;AAEH,CALM,C,CAMP;;AACA,OAAO,MAAMa,aAAa,GAAG,CAACL,IAAD,EAAOM,SAAS,GAAG,OAAnB,KACzBN,IAAI,CAACO,GAAL,CAASC,OAAO,iBACZ,oBAAC,MAAD;AACI,EAAA,MAAM,EAAE,CAACA,OAAO,CAACC,WAAR,CAAoBC,GAArB,EAA0BF,OAAO,CAACC,WAAR,CAAoBE,IAA9C,CADZ;AAEI,EAAA,WAAW,EAAE,GAFjB;AAGI,EAAA,SAAS,EAAEpB,eAAe,CAACe,SAAD,CAAf,CAA2Bb,GAH1C;AAII,EAAA,WAAW,EAAE,GAJjB;AAKI,EAAA,MAAM,EACFmB,IAAI,CAACC,IAAL,CAAUL,OAAO,CAACF,SAAD,CAAjB,IAAgCf,eAAe,CAACe,SAAD,CAAf,CAA2BV,UANnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBASI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAP,CATJ,CADJ,CADG","sourcesContent":["import React from 'react';\nimport numeral from 'numeral';\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n    cases: {\n        hex: \"#CC1034\",\n        rgb: \"rgb(204, 16, 52)\",\n        half_op: \"rgba(204, 16, 52, 0.5)\",\n        multiplier: 800,\n    },\n    recovered: {\n        hex: \"#7dd71d\",\n        rgb: \"rgb(125, 215, 29)\",\n        half_op: \"rgba(125, 215, 29, 0.5)\",\n        multiplier: 1200,\n    },\n    deaths: {\n        hex: \"#fb4443\",\n        rgb: \"rgb(251, 68, 67)\",\n        half_op: \"rgba(251, 68, 67, 0.5)\",\n        multiplier: 2000,\n    },\n};\n\n\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1))\n\n};\n// Draw circles on the map with iteractive tooltop\nexport const showDataOnMap = (data, casesType = 'cases') => (\n    data.map(country => (\n        <Circle\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity={0.4}\n            fillColor={casesTypeColors[casesType].hex}\n            fillOpacity={0.4}\n            radius={\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n            }\n        >\n            <Popup><h1>Im a popap</h1></Popup>\n        </Circle>\n    ))\n);"]},"metadata":{},"sourceType":"module"}