{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","index.js"],"names":["InfoBox","title","cases","isRed","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","sortData","data","sort","a","b","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","index","Circle","key","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","id","todayCases","todayRecovered","todayDeaths","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.09a2a0bd.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport './InfoBox.css';\n\n\nfunction InfoBox({ title, cases, isRed, active, total, ...props }) {\n    return (\n        <Card onClick={props.onClick} className={`infoBox ${active && 'infoBox--selected'} ${isRed && 'infoBox--red'}`}>\n            <CardContent>\n                {/*Title */}\n                <Typography className=\"infoBox__titel\" color=\"textSecondary\">\n                    {title}\n                </Typography>\n\n                {/*Number of cases */}\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\n\n                {/* 1.2m Total */}\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\n                    {total} Total\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox\n","import React from 'react';\nimport numeral from 'numeral';\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n    cases: {\n        hex: \"#CC1034\",\n        rgb: \"rgb(204, 16, 52)\",\n        half_op: \"rgba(204, 16, 52, 0.5)\",\n        multiplier: 800,\n    },\n    recovered: {\n        hex: \"#7dd71d\",\n        rgb: \"rgb(125, 215, 29)\",\n        half_op: \"rgba(125, 215, 29, 0.5)\",\n        multiplier: 1200,\n    },\n    deaths: {\n        hex: \"#fb4443\",\n        rgb: \"rgb(251, 68, 67)\",\n        half_op: \"rgba(251, 68, 67, 0.5)\",\n        multiplier: 2000,\n    },\n};\n\nexport const prettyPrintStat = (stat) => {\n    return stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n}\n\nexport const sortData = (data) => {\n    const sortedData = [...data];\n\n    return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1))\n\n};\n// Draw circles on the map with iteractive tooltop\nexport const showDataOnMap = (data, casesType = 'cases') => (\n    data.map((country, index) => (\n        <Circle\n            key={index}\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            fillOpacity={0.4}\n            fillColor={casesTypeColors[casesType].hex}\n            radius={\n                Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n            }\n        >\n            <Popup className=\"info-container\">\n                <div>\n                    <div className=\"info-flag\" style={{ backgroundImage: `url(${country.countryInfo.flag})` }} />\n\n\n                    <div className=\"info-name\">{country.country}</div>\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\n                    <div className=\"info-deaths\">Death: {numeral(country.deaths).format(\"0,0\")}</div>\n                </div>\n            </Popup>\n        </Circle>\n    ))\n);","import React from 'react'\nimport './Map.css';\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport { showDataOnMap } from './util';\n\nfunction Map({ countries, casesType, center, zoom }) {\n    return (\n        <div className=\"map\">\n            <LeafletMap center={center} zoom={zoom}>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                />\n                {showDataOnMap(countries, casesType)}\n            </LeafletMap>\n        </div>\n    )\n}\n\nexport default Map;\n","import React from 'react'\nimport './Table.css';\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n    return (\n        <div className=\"table\">\n            <table>\n                <tbody>\n                    {countries.map(({ country, cases }, index) => (\n\n                        <tr key={index}>\n                            <td>{country}</td>\n                            <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\n                        </tr>\n\n\n                    ))}\n                </tbody>\n            </table>\n        </div>\n\n    )\n}\n\nexport default Table\n","import React, { useState, useEffect } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport './LineGraph.css'\n\nconst options = {\n    legend: {\n        display: false,\n    },\n    elements: {\n        point: {\n            radius: 0,\n        },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem, data) {\n                return numeral(tooltipItem.value).format(\"+0,0\");\n            },\n        },\n    },\n    scales: {\n        xAxes: [\n            {\n                type: \"time\",\n                time: {\n                    format: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\",\n                },\n            },\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false,\n                },\n                ticks: {\n                    // Include a dollar sign in the ticks\n                    callback: function (value, index, values) {\n                        return numeral(value).format(\"0a\");\n                    },\n                },\n            },\n        ],\n    },\n};\n\nconst buildChartData = (data, casesType) => {\n    let chartData = [];\n    let lastDataPoint;\n    for (let date in data.cases) {\n        if (lastDataPoint) {\n            let newDataPoint = {\n                x: date,\n                y: data[casesType][date] - lastDataPoint,\n            };\n            chartData.push(newDataPoint);\n        }\n        lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n};\n\nfunction LineGraph({ casesType }) {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n                .then((response) => {\n                    return response.json();\n                })\n                .then((data) => {\n                    let chartData = buildChartData(data, casesType);\n                    setData(chartData);\n                    // buildChart(chartData);\n                });\n        };\n\n        fetchData();\n    }, [casesType]);\n\n    return (\n        <div className=\"app__graph\">\n            {data && data.length > 0 && (\n                <Line\n                    data={{\n                        datasets: [\n                            {\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                                borderColor: \"#CC1034\",\n                                data: data,\n                            },\n                        ],\n                    }}\n                    options={options}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default LineGraph;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent\n} from \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table'\nimport LineGraph from './LineGraph';\nimport { sortData, prettyPrintStat } from './util';\nimport \"leaflet/dist/leaflet.css\";\n\n\nfunction App() {\n  /* https://disease.sh/v3/covid-19/countries */\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then(response => response.json())\n      .then(data => {\n        setCountryInfo(data);\n      })\n  }, [])\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2\n            }\n          ));\n\n          const sortedData = sortData(data)\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        })\n\n    }\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    /* https://disease.sh/v3/covid-19/all*/\n    /* https://disease.sh/v3/covid-19/countries/[COUNTRY__CODE] */\n\n    const url = countryCode === 'worldwide' ? 'https://disease.sh/v3/covid-19/all' :\n      `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n\n        if (countryCode === 'worldwide') {\n          setMapCenter({ lat: 34.80746, lng: -40.4796 });\n          setMapZoom(4)\n        } else {\n          setMapCenter({ lat: data.countryInfo.lat, lng: data.countryInfo.long });\n          setMapZoom(4)\n        }\n      })\n\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country, id) => (\n                <MenuItem key={id} value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={e => setCasesType('cases')}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)} />\n\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={e => setCasesType('recovered')}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)} />\n\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={e => setCasesType('deaths')}\n            title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)} />\n        </div>\n        {/* Map*/}\n        <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3>Wordwide new {casesType}</h3>\n          <LineGraph casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div >\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}